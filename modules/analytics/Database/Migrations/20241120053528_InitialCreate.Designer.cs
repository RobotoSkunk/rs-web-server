// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RobotoSkunk.Analytics.Database;

#nullable disable

namespace modules.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241120053528_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RobotoSkunk.Analytics.Database.Entities.UniqueVisitorsPerDay", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Browser")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("browser");

                    b.Property<string>("BrowserVersion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("browser_version");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<short>("DeviceType")
                        .HasColumnType("smallint")
                        .HasColumnName("device_type");

                    b.Property<int>("Visits")
                        .HasColumnType("integer")
                        .HasColumnName("visits");

                    b.HasKey("Id")
                        .HasName("pk_unique_visitors_per_day");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_unique_visitors_per_day_created_at");

                    b.ToTable("unique_visitors_per_day", (string)null);
                });

            modelBuilder.Entity("RobotoSkunk.Analytics.Database.Entities.VisitorPages", b =>
                {
                    b.Property<string>("VisitorId")
                        .HasColumnType("text")
                        .HasColumnName("visitor_id");

                    b.Property<string>("Page")
                        .HasColumnType("text")
                        .HasColumnName("page");

                    b.HasKey("VisitorId", "Page")
                        .HasName("pk_visitor_pages");

                    b.ToTable("visitor_pages", (string)null);
                });

            modelBuilder.Entity("RobotoSkunk.Analytics.Database.Entities.VisitorReferrals", b =>
                {
                    b.Property<string>("VisitorId")
                        .HasColumnType("text")
                        .HasColumnName("visitor_id");

                    b.Property<string>("Referral")
                        .HasColumnType("text")
                        .HasColumnName("referral");

                    b.HasKey("VisitorId", "Referral")
                        .HasName("pk_visitor_referrals");

                    b.ToTable("visitor_referrals", (string)null);
                });

            modelBuilder.Entity("RobotoSkunk.Analytics.Database.Entities.VisitorPages", b =>
                {
                    b.HasOne("RobotoSkunk.Analytics.Database.Entities.UniqueVisitorsPerDay", "Visitor")
                        .WithMany("Pages")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_visitor_pages_unique_visitors_per_day_visitor_id");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("RobotoSkunk.Analytics.Database.Entities.VisitorReferrals", b =>
                {
                    b.HasOne("RobotoSkunk.Analytics.Database.Entities.UniqueVisitorsPerDay", "Visitor")
                        .WithMany("Referrals")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_visitor_referrals_unique_visitors_per_day_visitor_id");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("RobotoSkunk.Analytics.Database.Entities.UniqueVisitorsPerDay", b =>
                {
                    b.Navigation("Pages");

                    b.Navigation("Referrals");
                });
#pragma warning restore 612, 618
        }
    }
}
